# import Precip_calc
# print("Onto compare_data")
# #monthbreakdown(station)
# 
# t = PrettyTable()
# t.field_names = ["months", "precipitation per day", "precipitation per month"]
# for k in range(12):
#     t.add_row([monthnameslist[k], avgdayprecip[k], avgmonthprecip[k]]) 
# print(file_nametuple[q])
# print(t)
# yearnameslist = ["1988","1989","1990","1991","1992","1993","1994",
#                  "1995","1996","1997","1998","1999","2000","2001",
#                  "2002","2003","2004","2005","2006","2007","2008",
#                  "2009","2010","2011","2012","2013","2014","2015",
#                  "2016","2017","2018","2019","2020"]

# avgyearpreciplist = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19.250000000000004, 55.07000000000001, 54.339999999999996, 62.05000000000001, 47.59999999999999, 61.3, 51.27, 54.44, 56.78999999999996, 48.130000000000024, 37.930000000000014, 35.63000000000001],
#  [0, 0, 0, 0, 0, 0, 0, 0, 29.089999999999996, 65.79, 57.450000000000024, 60.20999999999996, 40.91000000000001, 50.710000000000015, 46.92999999999999, 57.469999999999985, 50.030000000000015, 49.230000000000025, 63.389999999999986, 47.58000000000004, 41.67000000000001, 45.28999999999999, 56.149999999999984, 52.04, 59.019999999999975, 49.82999999999999, 64.78000000000004, 57.00000000000002, 54.22000000000003, 58.34, 50.46999999999997, 44.40000000000001, 36.08000000000001],
#  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51.64000000000002, 65.92, 51.70000000000001, 56.85999999999998, 47.44000000000001, 55.80999999999998, 58.220000000000006, 59.29999999999997, 65.59999999999998, 46.529999999999994, 49.24, 48.67000000000003, 56.64999999999998, 54.81999999999999, 64.15000000000002, 48.95000000000002, 66.21999999999998, 55.67, 46.85000000000002, 55.809999999999995, 38.87000000000001, 46.24000000000001, 30.150000000000016]]


# avgyearpreciplist = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19.250000000000004, 55.07000000000001, 54.339999999999996, 62.05000000000001, 47.59999999999999, 61.3, 51.27, 54.44, 56.78999999999996, 48.130000000000024, 37.930000000000014, 35.63000000000001],
#  [17.15, 39.00000000000002, 52.35000000000001, 39.97000000000003, 31.470000000000013, 29.280000000000012, 35.64000000000003, 37.55, 49.97000000000002, 45.75999999999998, 41.72, 46.190000000000005, 34.61, 40.63000000000001, 32.770000000000024, 41.569999999999986, 34.42, 38.6, 49.10999999999999, 39.71000000000001, 34.96000000000003, 38.850000000000016, 49.47, 40.54, 48.02999999999999, 36.39000000000001, 52.35999999999999, 46.3, 47.39000000000001, 53.15999999999999, 37.12000000000002, 30.900000000000023, 23.340000000000007],
#  [13.569999999999997, 37.38000000000002, 45.42000000000001, 37.500000000000014, 38.03, 37.11, 36.77000000000004, 44.73000000000004, 52.65000000000001, 46.73999999999998, 38.70000000000004, 48.17000000000002, 33.510000000000005, 40.29000000000001, 35.36000000000001, 37.82, 34.449999999999996, 35.95000000000001, 44.57000000000001, 37.83000000000002, 31.690000000000012, 40.86999999999999, 45.35000000000001, 38.820000000000014, 53.370000000000005, 34.87000000000001, 52.14000000000004, 43.23999999999997, 48.94000000000001, 48.53000000000003, 42.2, 33.190000000000026, 28.24],
#  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23.300000000000008, 55.669999999999995, 35.01000000000001, 42.35000000000001, 34.31000000000001, 46.06, 36.20000000000001, 42.089999999999996, 59.23000000000001, 49.13000000000001, 36.87, 48.59, 61.779999999999966, 46.08000000000002, 61.73, 36.96000000000002, 64.47999999999999, 56.82, 55.28999999999998, 57.67000000000001, 45.48000000000001, 34.90000000000001, 25.45],
#  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.24, 42.890000000000036, 54.24, 44.209999999999994, 33.80000000000001, 43.85999999999999, 54.650000000000006, 44.93, 54.000000000000036, 32.21000000000001, 54.619999999999976, 51.25999999999999, 53.05, 58.219999999999985, 41.99000000000001, 34.45999999999999, 25.66],
#  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8.04, 37.49000000000001, 30.740000000000027, 34.30000000000002, 33.68, 34.170000000000016, 42.60000000000001, 37.450000000000024, 34.84, 35.33, 41.75000000000002, 36.23000000000002, 50.09000000000001, 31.11000000000001, 47.11000000000001, 38.08, 46.27000000000004, 41.96000000000001, 39.00999999999999, 30.56, 20.98],
#  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.459999999999996, 44.660000000000004, 36.750000000000014, 46.68999999999999, 39.84, 39.980000000000004, 54.24000000000003, 38.53, 37.59000000000003, 44.110000000000014, 49.43000000000001, 43.370000000000026, 58.260000000000005, 38.75, 57.55000000000001, 46.039999999999985, 49.05000000000002, 49.97, 39.09000000000001, 37.81000000000001, 27.599999999999994],
#  [0, 0, 20.179999999999993, 38.81999999999998, 35.02999999999999, 27.590000000000003, 36.07000000000002, 45.94, 53.99000000000001, 48.27000000000002, 46.36000000000001, 48.42999999999999, 32.76000000000002, 42.04999999999998, 36.30000000000001, 44.06999999999999, 33.080000000000005, 38.81000000000001, 50.660000000000004, 39.39000000000003, 30.74, 39.14999999999999, 48.370000000000005, 38.34000000000001, 49.29999999999998, 31.630000000000013, 48.29999999999998, 44.180000000000014, 45.11, 47.920000000000016, 34.570000000000014, 33.39000000000002, 22.560000000000006],
#  [0, 0, 0, 0, 0, 0, 0, 0, 29.089999999999996, 65.79, 57.450000000000024, 60.20999999999996, 40.91000000000001, 50.710000000000015, 46.92999999999999, 57.469999999999985, 50.030000000000015, 49.230000000000025, 63.389999999999986, 47.58000000000004, 41.67000000000001, 45.28999999999999, 56.149999999999984, 52.04, 59.019999999999975, 49.82999999999999, 64.78000000000004, 57.00000000000002, 54.22000000000003, 58.34, 50.46999999999997, 44.40000000000001, 36.08000000000001],
#  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51.64000000000002, 65.92, 51.70000000000001, 56.85999999999998, 47.44000000000001, 55.80999999999998, 58.220000000000006, 59.29999999999997, 65.59999999999998, 46.529999999999994, 49.24, 48.67000000000003, 56.64999999999998, 54.81999999999999, 64.15000000000002, 48.95000000000002, 66.21999999999998, 55.67, 46.85000000000002, 55.809999999999995, 38.87000000000001, 46.24000000000001, 30.150000000000016]]
# minlist = []
# maxlist = []
# 
# 
# k = 0
# q = 1000000
# for y in range(len(avgyearpreciplist)):
#     for t in range(len(avgyearpreciplist[y])):
#         if (avgyearpreciplist[y][t]) == 0:
#             pass
#         elif (avgyearpreciplist[y][t]) != 0:
#             k = avgyearpreciplist[y][t]
#             if float(q) > float(k):
#                 q = k
#                 minlist.append(q)
#             else:
#                 pass
#         else:
#             print("this didn't work")
# 
#     k = max(avgyearpreciplist[y])
#     maxlist.append(k)
#         
#         
#         
# 
# print(len(avgyearpreciplist))
# print(len(avgyearpreciplist[y]))
# print(min(minlist))
# print(minlist)
# print(maxlist)
# b = min(minlist)
# y = minlist.index(min(minlist))
# print(y)
# print(b)
# r = avgyearpreciplist[y+1].index(float(b))
# print(r)
# print(yearnameslist[r])
# j = max(maxlist)
# l = maxlist.index(max(maxlist))
# print(j)
# print(l)
# print(maxlist)
# z = avgyearpreciplist[l].index(float(j))
# print(z)
# print(yearnameslist[z])
# 
# #print(max(maxlist))
# #v = max(maxlist)

# dictlist = []

# dictlist.append("site number")
# dictlist.append("date")
# dictlist.append("precip")
# dictlist.append("condition")

# station = []

# file_nametuple =("Hydrology_Fall_City.csv","Hydrology_Federal_Way.csv",
#                 "Hydrology_Bothell.csv", "Hydrology_North_Vashon.csv",
#                 "Hydrology_South_Vashon.csv", "Hydrology_Mukilteo.csv",
#                 "Hydrology_Bellevue.csv", "Hydrology_Burien.csv",
#                 "Hydrology_Cougar_MT.csv", "Hydrology_Enumclaw.csv")
                


# z = len(file_nametuple)
# avgyearpreciplist = []
# avgdaypreciplist = []
# avgmonthpreciplist = []

# for q in range(z):  
    
#     def weather_file(file_nametuple):
#         """Takes weather data csv file and reads it
#            into a dictionary and appended to a list 
#         """
#         file_name = file_nametuple[q]
        
#         with open(file_name,'r') as file:
#             next(file)
#             for line in file:
#                 line = line.strip('\n')
#                 line_list = line.split(",")
                
#                 record = {}
                
#                 record[dictlist[1]] = str(line_list[1])
                
#                 record[dictlist[2]] = float(line_list[2])
                
#                 record[dictlist[3]] = str(line_list[3])
                
#                 station.append(record)
#         return station
# print    

python --version
